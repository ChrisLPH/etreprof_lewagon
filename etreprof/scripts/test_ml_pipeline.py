"""
Script de test pour le pipeline ML complet

Ce script teste l'int√©gration entre:
- Classification de contenu
- Clustering utilisateurs
- Syst√®me de recommandations

Usage: python scripts/test_ml_pipeline.py
"""

import sys
import os
import pandas as pd
import numpy as np

# Ajouter le r√©pertoire parent au path
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from ml_package import ContentClassifier, UserClustering, ContentRecommender, create_full_pipeline


def create_mock_data():
    """Cr√©e des donn√©es mock pour tester le pipeline"""
    print("üìä Cr√©ation des donn√©es de test...")

    # Mock users data
    np.random.seed(42)
    users_data = pd.DataFrame({
        'id': range(1000, 1200),
        'anciennete': np.random.randint(1, 30, 200),
        'degre': np.random.choice([1, 2], 200),
        'maternelle': np.random.choice([0, 1], 200, p=[0.8, 0.2]),
        'elementaire': np.random.choice([0, 1], 200, p=[0.6, 0.4]),
        'college': np.random.choice([0, 1], 200, p=[0.7, 0.3]),
        'lycee': np.random.choice([0, 1], 200, p=[0.8, 0.2]),
        'lycee_pro': np.random.choice([0, 1], 200, p=[0.9, 0.1])
    })

    # Mock content data
    content_samples = [
        "# G√©rer les √©l√®ves en difficult√©\n\nStrategies pour adapter la p√©dagogie et favoriser la r√©ussite de tous.",
        "# Utiliser le num√©rique en classe\n\nInt√©grer les outils technologiques pour enrichir les apprentissages.",
        "# Bien-√™tre de l'enseignant\n\nTechniques pour g√©rer le stress et pr√©server son √©quilibre professionnel.",
        "# √âvaluation par comp√©tences\n\nMise en place d'une √©valuation formative et bienveillante.",
        "# √âcole inclusive\n\nAdapter sa p√©dagogie aux √©l√®ves √† besoins √©ducatifs particuliers."
    ]

    contents_data = pd.DataFrame({
        'id': range(100, 105),
        'content': content_samples,
        'title': [f"Ressource #{i}" for i in range(1, 6)]
    })

    return users_data, contents_data


def test_content_classification():
    """Test de la classification de contenu"""
    print("\nüîç TEST - Classification de contenu")
    print("=" * 50)

    classifier = ContentClassifier()

    test_text = """
    # Diff√©renciation p√©dagogique en math√©matiques

    Cette ressource pr√©sente des strat√©gies pour adapter l'enseignement
    des math√©matiques aux diff√©rents niveaux d'√©l√®ves. L'objectif est de
    permettre la r√©ussite de tous les √©l√®ves en proposant des activit√©s
    adapt√©es √† leurs besoins sp√©cifiques.
    """

    result = classifier.get_top_predictions(test_text)

    print(f"‚úÖ Th√®me principal: {result['theme_principal']['nom']}")
    print(f"   Confiance: {result['theme_principal']['confidence']}")
    print(f"‚úÖ D√©fi prioritaire: {result['defi_prioritaire']['nom']}")
    print(f"   Confiance: {result['defi_prioritaire']['confidence']}")
    print(f"‚úÖ Nombre de mots: {result['features_extracted']['word_count']}")

    return classifier


def test_user_clustering():
    """Test du clustering utilisateurs"""
    print("\nüë• TEST - Clustering utilisateurs")
    print("=" * 50)

    users_data, _ = create_mock_data()

    clusterer = UserClustering(n_clusters=6)
    clusterer.fit(users_data)

    # Afficher le r√©sum√© des clusters
    summary = clusterer.get_cluster_summary()
    print("‚úÖ Clusters cr√©√©s:")
    print(summary.to_string(index=False))

    # Test de pr√©diction
    new_users = users_data.sample(5).copy()
    predictions = clusterer.predict(new_users)
    print(f"\n‚úÖ Pr√©dictions pour 5 nouveaux utilisateurs:")
    print(predictions[['user_id', 'cluster_name', 'confidence_score']].to_string(index=False))

    return clusterer


def test_recommendations():
    """Test du syst√®me de recommandations"""
    print("\nüéØ TEST - Syst√®me de recommandations")
    print("=" * 50)

    recommender = ContentRecommender()
    mock_clusters = {i: f"Cluster_{i}" for i in range(5)}

    recommender.fit(None, mock_clusters)  # Utilise le catalogue mock

    # Recommandations pour un cluster
    cluster_recs = recommender.get_recommendations_for_cluster(0, 3)
    print("‚úÖ Top 3 recommandations pour le Cluster 0:")
    print(cluster_recs[['title', 'type', 'theme_principal', 'recommendation_score']].to_string(index=False))

    # Recommandations pour un utilisateur
    user_recs = recommender.get_user_recommendations(user_id=12345, user_cluster=1, n_recommendations=3)
    print(f"\n‚úÖ Recommandations personnalis√©es pour l'utilisateur 12345:")
    print(user_recs[['title', 'type', 'personalized_score']].to_string(index=False))

    return recommender


def test_full_pipeline():
    """Test complet du pipeline int√©gr√©"""
    print("\nüöÄ TEST - Pipeline complet")
    print("=" * 50)

    # Cr√©er le pipeline
    pipeline = create_full_pipeline()
    users_data, contents_data = create_mock_data()

    print("1Ô∏è‚É£ Classification des contenus...")
    content_results = pipeline['content_classifier'].batch_classify(contents_data)
    print(f"   ‚úÖ {len(content_results)} contenus classifi√©s")

    print("2Ô∏è‚É£ Clustering des utilisateurs...")
    pipeline['user_clustering'].fit(users_data)
    cluster_info = pipeline['user_clustering'].get_cluster_info()
    print(f"   ‚úÖ {len(cluster_info)} clusters cr√©√©s")

    print("3Ô∏è‚É£ G√©n√©ration des recommandations...")
    pipeline['recommender'].fit(None, cluster_info)
    all_recs = pipeline['recommender'].get_all_cluster_recommendations(3)
    print(f"   ‚úÖ Recommandations g√©n√©r√©es pour {len(all_recs)} clusters")

    # Export des r√©sultats
    print("4Ô∏è‚É£ Export des r√©sultats...")

    # Sauvegarder les r√©sultats
    content_results.to_csv('test_content_classification.csv', index=False)

    cluster_summary = pipeline['user_clustering'].get_cluster_summary()
    cluster_summary.to_csv('test_cluster_summary.csv', index=False)

    recs_summary = pipeline['recommender'].export_recommendations_summary()
    recs_summary.to_csv('test_recommendations.csv', index=False)

    print("   ‚úÖ R√©sultats sauvegard√©s dans les fichiers CSV")

    return pipeline


def main():
    """Fonction principale - lance tous les tests"""
    print("üß™ D√âBUT DES TESTS DU PIPELINE ML")
    print("=" * 60)

    try:
        # Tests individuels
        classifier = test_content_classification()
        clusterer = test_user_clustering()
        recommender = test_recommendations()

        # Test int√©gr√©
        pipeline = test_full_pipeline()

        print("\nüéâ TOUS LES TESTS SONT PASS√âS !")
        print("‚úÖ Le pipeline ML est fonctionnel")
        print("\nüìã Fichiers g√©n√©r√©s:")
        print("   - test_content_classification.csv")
        print("   - test_cluster_summary.csv")
        print("   - test_recommendations.csv")

    except Exception as e:
        print(f"\n‚ùå ERREUR LORS DES TESTS: {e}")
        import traceback
        traceback.print_exc()
        return 1

    return 0


if __name__ == "__main__":
    exit_code = main()
    sys.exit(exit_code)
