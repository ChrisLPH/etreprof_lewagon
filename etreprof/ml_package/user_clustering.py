"""
User Clustering Module
Clustering des utilisateurs bas√© sur leurs comportements et profils.

Version MOCK pour d√©veloppement - √† remplacer par les vrais mod√®les de l'√©quipe
G√©n√©r√© par IA pour simuler le comportement d'un classifieur de users en attendant l'int√©gration de mod√®les r√©els.
A utiliser uniquement pour les tests et la d√©monstration de l'interface utilisateur.
Ne pas utiliser en production.
"""

import pandas as pd
import numpy as np
import random
from typing import Dict, List, Optional, Tuple
from sklearn.cluster import KMeans
from sklearn.preprocessing import StandardScaler
from sklearn.decomposition import PCA


class UserClustering:
    """Clustering utilisateurs (VERSION MOCK)"""

    def __init__(self, n_clusters: int = 8):
        self.n_clusters = min(n_clusters, 8)  # Max 8 clusters comme sp√©cifi√©
        self.model = None
        self.scaler = StandardScaler()
        self.feature_columns = []
        self.cluster_profiles = {}

        # Noms de clusters pr√©d√©finis pour la d√©mo
        self.cluster_names = [
            "Les Innovateurs Num√©riques",
            "Les P√©dagogues Traditionnels",
            "Les Sp√©cialistes Inclusifs",
            "Les Gestionnaires Pragmatiques",
            "Les Experts √âvaluation",
            "Les Mentors Bienveillants",
            "Les Novices Motiv√©s",
            "Les V√©t√©rans Exp√©riment√©s"
        ][:self.n_clusters]

    def _prepare_features(self, users_df: pd.DataFrame) -> pd.DataFrame:
        """
        Pr√©pare les features pour le clustering (VERSION MOCK)
        """
        # Features basiques pour la d√©mo
        feature_cols = []

        # Features num√©riques disponibles
        numeric_features = [
            'anciennete', 'degre', 'maternelle', 'elementaire', 'college', 'lycee',
            'lycee_pro', 'autre'
        ]

        # Ajouter les features qui existent dans le DataFrame
        for col in numeric_features:
            if col in users_df.columns:
                feature_cols.append(col)

        # Ajouter les features de niveaux si elles existent
        niveau_cols = [col for col in users_df.columns if col.startswith('niveau_')]
        feature_cols.extend(niveau_cols)

        # Si on a peu de features, on en cr√©e des mock
        if len(feature_cols) < 5:
            # Cr√©er des features mock bas√©es sur l'anciennet√© et le degr√©
            users_df['mock_engagement'] = np.random.uniform(0, 1, len(users_df))
            users_df['mock_diversity'] = np.random.uniform(0, 1, len(users_df))
            users_df['mock_activity'] = np.random.uniform(0, 1, len(users_df))
            feature_cols.extend(['mock_engagement', 'mock_diversity', 'mock_activity'])

        self.feature_columns = feature_cols

        # Retourner le DataFrame avec les features s√©lectionn√©es
        features_df = users_df[['id'] + feature_cols].copy()

        # G√©rer les valeurs manquantes
        for col in feature_cols:
            if col in features_df.columns:
                features_df[col] = features_df[col].fillna(0)

        return features_df

    def fit(self, users_df: pd.DataFrame) -> 'UserClustering':
        """
        Entra√Æne le mod√®le de clustering
        """
        print(f"üîÑ Entra√Ænement du clustering avec {len(users_df)} utilisateurs...")

        # Pr√©parer les features
        features_df = self._prepare_features(users_df)

        # Features pour le clustering (sans l'ID)
        X = features_df.drop(['id'], axis=1)

        # Normalisation
        X_scaled = self.scaler.fit_transform(X)

        # Clustering K-means (MOCK)
        self.model = KMeans(n_clusters=self.n_clusters, random_state=42)
        clusters = self.model.fit_predict(X_scaled)

        # Sauvegarder les pr√©dictions
        features_df['cluster'] = clusters

        # G√©n√©rer les profils de clusters
        self._generate_cluster_profiles(features_df)

        print(f"‚úÖ Clustering termin√© - {self.n_clusters} clusters cr√©√©s")

        return self

    def _generate_cluster_profiles(self, features_df: pd.DataFrame):
        """
        G√©n√®re les profils descriptifs des clusters
        """
        profiles = {}

        for i in range(self.n_clusters):
            cluster_data = features_df[features_df['cluster'] == i]

            if len(cluster_data) == 0:
                continue

            # Calculer les moyennes des features
            feature_means = {}
            for col in self.feature_columns:
                if col in cluster_data.columns:
                    feature_means[col] = cluster_data[col].mean()

            # Profil mock avec des caract√©ristiques g√©n√©r√©es
            profiles[i] = {
                "nom": self.cluster_names[i],
                "taille": len(cluster_data),
                "pourcentage": round(len(cluster_data) / len(features_df) * 100, 1),
                "features_moyennes": feature_means,
                "description": self._generate_cluster_description(i),
                "themes_preferes": self._generate_preferred_themes(i),
                "niveau_engagement": random.choice(["Faible", "Moyen", "√âlev√©"]),
                "anciennete_moyenne": feature_means.get('anciennete', 0)
            }

        self.cluster_profiles = profiles

    def _generate_cluster_description(self, cluster_id: int) -> str:
        """G√©n√®re une description mock pour chaque cluster"""
        descriptions = [
            "Enseignants technophiles qui int√®grent activement le num√©rique dans leur p√©dagogie",
            "Enseignants exp√©riment√©s privil√©giant les m√©thodes √©prouv√©es et la transmission directe",
            "Enseignants sp√©cialis√©s dans l'adaptation aux besoins particuliers des √©l√®ves",
            "Enseignants focalis√©s sur l'organisation et la gestion efficace de classe",
            "Enseignants experts dans l'√©valuation et le suivi des apprentissages",
            "Enseignants bienveillants privil√©giant la relation et le bien-√™tre des √©l√®ves",
            "Nouveaux enseignants en recherche active de ressources et formations",
            "Enseignants seniors avec une forte expertise disciplinaire"
        ]

        return descriptions[cluster_id] if cluster_id < len(descriptions) else "Profil mixte"

    def _generate_preferred_themes(self, cluster_id: int) -> List[str]:
        """G√©n√®re les th√®mes pr√©f√©r√©s mock pour chaque cluster"""
        all_themes = [
            "P√©dagogie diff√©renci√©e", "√âvaluation des apprentissages",
            "Gestion de classe", "Num√©rique √©ducatif", "Bien-√™tre enseignant",
            "Relations parents-√©cole", "Orientation scolaire", "√âducation inclusive"
        ]

        # Chaque cluster a une pr√©f√©rence pour 2-3 th√®mes
        np.random.seed(cluster_id)  # Pour la reproductibilit√©
        n_themes = random.randint(2, 4)
        preferred = np.random.choice(all_themes, n_themes, replace=False).tolist()

        return preferred

    def predict(self, users_df: pd.DataFrame) -> pd.DataFrame:
        """
        Pr√©dit les clusters pour de nouveaux utilisateurs
        """
        if self.model is None:
            raise ValueError("Le mod√®le doit √™tre entra√Æn√© avant la pr√©diction (appeler .fit() d'abord)")

        print(f"üîÑ Pr√©diction pour {len(users_df)} nouveaux utilisateurs...")

        # Pr√©parer les features
        features_df = self._prepare_features(users_df)

        # Features pour la pr√©diction (sans l'ID)
        X = features_df.drop(['id'], axis=1)

        # Normalisation avec le scaler d√©j√† entra√Æn√©
        X_scaled = self.scaler.transform(X)

        # Pr√©diction
        predicted_clusters = self.model.predict(X_scaled)

        # Calculer les scores de confiance (mock)
        confidence_scores = np.random.uniform(0.6, 0.95, len(predicted_clusters))

        # Pr√©parer le r√©sultat
        result_df = pd.DataFrame({
            'user_id': features_df['id'],
            'cluster_predicted': predicted_clusters,
            'cluster_name': [self.cluster_names[c] for c in predicted_clusters],
            'confidence_score': np.round(confidence_scores, 3)
        })

        print("‚úÖ Pr√©diction termin√©e")

        return result_df

    def get_cluster_info(self, cluster_id: Optional[int] = None) -> Dict:
        """
        Retourne les informations sur un cluster sp√©cifique ou tous les clusters
        """
        if cluster_id is not None:
            return self.cluster_profiles.get(cluster_id, {})

        return self.cluster_profiles

    def get_cluster_summary(self) -> pd.DataFrame:
        """
        Retourne un r√©sum√© de tous les clusters sous forme de DataFrame
        """
        summary_data = []

        for cluster_id, profile in self.cluster_profiles.items():
            summary_data.append({
                'cluster_id': cluster_id,
                'nom': profile['nom'],
                'taille': profile['taille'],
                'pourcentage': profile['pourcentage'],
                'niveau_engagement': profile['niveau_engagement'],
                'anciennete_moyenne': round(profile['anciennete_moyenne'], 1),
                'themes_preferes': ', '.join(profile['themes_preferes'][:2]) + '...'
            })

        return pd.DataFrame(summary_data)


# Fonction utilitaire pour tester
def demo_clustering():
    """D√©monstration du clustering"""
    # Donn√©es mock pour la d√©mo
    np.random.seed(42)
    mock_users = pd.DataFrame({
        'id': range(1000, 1100),
        'anciennete': np.random.randint(1, 30, 100),
        'degre': np.random.choice([1, 2], 100),
        'maternelle': np.random.choice([0, 1], 100, p=[0.8, 0.2]),
        'elementaire': np.random.choice([0, 1], 100, p=[0.6, 0.4]),
        'college': np.random.choice([0, 1], 100, p=[0.7, 0.3]),
        'lycee': np.random.choice([0, 1], 100, p=[0.8, 0.2])
    })

    # Clustering
    clusterer = UserClustering(n_clusters=5)
    clusterer.fit(mock_users)

    # Afficher les r√©sultats
    print("=== D√âMONSTRATION CLUSTERING ===")
    summary = clusterer.get_cluster_summary()
    print(summary)

    # Test de pr√©diction sur de nouveaux utilisateurs
    new_users = mock_users.sample(10).copy()
    predictions = clusterer.predict(new_users)
    print("\n=== PR√âDICTIONS ===")
    print(predictions.head())

    return clusterer


if __name__ == "__main__":
    demo_clustering()
